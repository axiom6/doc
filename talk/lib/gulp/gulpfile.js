// Generated by CoffeeScript 1.9.1
var File, batch, cheerio, coffee, compile, concat, del, dir, dist, es, fs, gulp, gulpSlides, gulpif, gutil, h2Cap, highlight, img, isId, jscs, jshint, lazypipe, less, lib, mkdirSync, path, rename, slideThru, slides, src, strObj, streamee, through, uglify, watch,
  hasProp = {}.hasOwnProperty;

gulp = require('gulp');

gutil = require('gulp-util');

del = require('del');

streamee = require('streamee');

es = require('event-stream');

coffee = require('gulp-coffee');

less = require('gulp-less');

cheerio = require('gulp-cheerio');

highlight = require('gulp-highlight');

gulpif = require('gulp-if');

concat = require('gulp-concat');

uglify = require('gulp-uglify');

jshint = require('gulp-jshint');

jscs = require('gulp-jscs');

batch = require('gulp-batch');

rename = require('gulp-rename');

watch = require('gulp-watch');

lazypipe = require('lazypipe');

fs = require('fs');

path = require('path');

File = require('vinyl');

through = require('through');

gulpSlides = require('gulp-slides');

dir = {
  css: 'css/',
  htm: 'htm/',
  htn: 'htn/',
  img: 'img/',
  lib: 'lib/',
  src: 'src/'
};

lib = {
  bower: dir.lib + 'bower_components/',
  nodeGlobal: dir.lib + 'node_modules/',
  nodeLocal: 'node_modules/'
};

compile = {
  js: dir.lib + 'dist/compile/js/',
  css: dir.lib + 'dist/compile/css/',
  htn: dir.htn,
  all: './' + dir.lib + 'dist/compile/all/'
};

src = {
  coffee: dir.src + '**/*.coffee',
  less: dir.css + '**/*.less',
  js: dir.src + '**/*.js',
  css: dir.css + '**/*.css',
  html: dir.htm + '**/*.html',
  slide: dir.htm + 'spark/spark.html'
};

src.watch = [src.coffee, src.less];

img = {
  jpg: dir.img + '**/*.jpg',
  png: dir.img + '**/*.png',
  svg: dir.img + '**/*.svg'
};

img.all = [img.jpg, img.png, img.svg];

dist = {
  js: compile.js + '**/*.js',
  css: compile.css + '**/*.css',
  all: compile.all + '**/*.*'
};

h2Cap = function($, file) {
  return $('h2').each(function() {
    var $h2;
    $h2 = $(this);
    return $h2.text($h2.text().toUpperCase());
  });
};

isId = function(id) {
  return (id != null) && typeof id === 'string' && id !== '';
};

strObj = function(obj) {
  var key, str, val;
  str = '';
  for (key in obj) {
    if (!hasProp.call(obj, key)) continue;
    val = obj[key];
    str += key + ":" + val.toString() + ", ";
  }
  return str;
};

mkdirSync = function(dir) {
  var e;
  try {
    return fs.mkdirSync(dir, 0x1ff);
  } catch (_error) {
    e = _error;
  }
};

slideThru = function($, talk) {
  var files, onEnd, onFile;
  console.log('Talk:' + talk.base);
  files = [];
  onFile = function(file) {
    return files.push(file);
  };
  onEnd = function() {
    var thisOnEnd;
    console.log('onEndCalled');
    thisOnEnd = this;
    $('section').each(function(i, elem) {
      var file, html, id, name;
      id = $(elem).attr('id');
      if (isId(id)) {
        name = talk.path.replace(/htm\//, 'htn/');
        name = name.substring(0, name.lastIndexOf('/')) + id + '.htm';
        html = $.html(elem);
        file = new File({
          cwd: talk.cwd,
          base: talk.base,
          path: name,
          contents: new Buffer(html)
        });
        console.log('  Slide Created ' + name);
        return thisOnEnd.emit('data', file);
      }
    });
    return thisOnEnd.emit('end');
  };
  return through(onFile, onEnd);
};

slides = function($, talk) {
  dir = talk.path.replace(/htm\//, 'htn/');
  dir = dir.substring(0, dir.lastIndexOf('/'));
  mkdirSync(dir, 0x1ff);
  console.log('Talk:' + talk.path, dir);
  return $('section').each(function(i, elem) {
    var html, id, name;
    id = $(elem).attr('id');
    if (isId(id)) {
      name = dir + '/' + id + '.htm';
      html = $.html(elem);
      return fs.writeFile(name, html, function() {
        return console.log('  Slide Created ' + name);
      });
    }
  });
};

gulp.task('coffee', [], function() {
  return gulp.src(src.coffee).pipe(coffee().on('error', gutil.log)).pipe(gulp.dest(compile.js));
});

gulp.task('less', [], function() {
  return gulp.src(src.less).pipe(less().on('error', gutil.log)).pipe(gulp.dest(compile.css));
});

gulp.task('highlight', [], function() {
  return gulp.src(src.html).pipe(highlight().on('error', gutil.log)).pipe(gulp.dest(compile.htn));
});

gulp.task('compile', ['coffee', 'less'], function() {
  return console.log('compile');
});

gulp.task('h2Cap', [], function() {
  return gulp.src(src.html).pipe(cheerio(h2Cap).on('error', gutil.log)).pipe(gulp.dest(compile.htn));
});

gulp.task('slides', [], function() {
  return gulp.src(src.html).pipe(highlight()).pipe(cheerio(slides).on('error', gutil.log));
});

gulp.task('slideThrough', [], function() {
  return gulp.src(src.slide).pipe(highlight()).pipe(cheerio(slideThru).on('error', gutil.log)).pipe(gulp.dest(compile.htn));
});

gulp.task('slidesPlug', [], function() {
  return gulp.src(src.html).pipe(highlight()).pipe(gulpSlides().on('error', gutil.log)).pipe(gulp.dest(compile.htn));
});

gulp.task('watchc', [], function() {
  return gulp.watch(src.watch, ['compile']).on('change')(function(event) {
    return console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');
  });
});

gulp.task('distjs', ['coffee'], function() {
  return gulp.src(dist.js).pipe(concat('all.js')).pipe(uglify()).pipe(gulp.dest(compile.all));
});

gulp.task('distcss', ['less'], function() {
  return gulp.src(dist.css).pipe(concat('all.css')).pipe(gulp.dest(compile.all));
});

gulp.task('dist', ['distjs', 'distcss'], function() {
  return console.log('dist');
});

gulp.task('clean', [], function() {
  return del([compile.js + '*', compile.css + '*', compile.htn + '*', dist.all], function(err, paths) {
    return console.log('Deleted ', paths.join('\n'));
  });
});

gulp.task('all', ['dist'], function() {
  return console.log('all');
});
